generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If you encounter "permission denied to create database" errors during migrations,
  // uncomment the following line and add SHADOW_DATABASE_URL to your .env file
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Component {
  id          String             @id @default(cuid())
  name        String
  description String?
  code        String
  sourceData  String
  sourceType  String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  versions    ComponentVersion[]
  feedbacks   UserFeedback[]
  tags        Tag[]              @relation("ComponentToTag")
}

model ComponentVersion {
  id          String    @id @default(cuid())
  code        String
  createdAt   DateTime  @default(now())
  componentId String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

model Tag {
  id         String      @id @default(cuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  components Component[] @relation("ComponentToTag")
}

model UserFeedback {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  componentId String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

model ReasoningTestLog {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  prompt       String
  code         String
  model        String
  score        Int
  responseTime Int?
  errorMessage String?
  metadata     String?
}

model LearningLog {
  id          String   @id @default(cuid())
  taskId      String
  component   String
  input       String
  output      String
  result      String
  feedback    String?
  errorType   String?
  remediation String?
  metadata    String?
  timestamp   DateTime @default(now())
}

model AssistantLog {
  id        String   @id @default(cuid())
  event     String
  source    String
  variant   String?
  sessionId String?
  duration  Int?
  createdAt DateTime @default(now())
  metadata  String?
}

model Event {
  id        String   @id @default(cuid())
  eventType String
  timestamp DateTime
  sessionId String
  metadata  String?
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([sessionId])
  @@index([timestamp])
}

model PromptTemplate {
  id          String            @id
  name        String
  template    String
  description String
  category    String
  version     Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  executions  PromptExecution[]

  @@index([category])
}

model PromptExecution {
  id               String         @id
  promptTemplateId String
  input            String
  output           String
  success          Boolean?
  feedback         String?
  feedbackDetails  String?
  executionTime    Int
  executedAt       DateTime
  createdAt        DateTime       @default(now())
  template         PromptTemplate @relation(fields: [promptTemplateId], references: [id])

  @@index([promptTemplateId])
  @@index([executedAt])
  @@index([success])
}

// Plugin Enhancer Models

model PluginEnhancerReport {
  id                Int                    @id @default(autoincrement())
  timestamp         DateTime               @default(now())
  pluginCount       Int
  okCount           Int
  warningCount      Int
  errorCount        Int
  globalSuggestions GlobalSuggestion[]
  analyses          PluginAnalysis[]
  training          TrainingSession[]

  @@map("plugin_enhancer_reports")
}

model GlobalSuggestion {
  id           Int                  @id @default(autoincrement())
  type         String
  severity     String
  message      String
  details      String?
  report       PluginEnhancerReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     Int

  @@map("global_suggestions")
}

model PluginAnalysis {
  id           Int                  @id @default(autoincrement())
  pluginId     String
  pluginName   String?
  status       String
  initTime     Float?
  renderTime   Float?
  destroyTime  Float?
  errorCount   Int?
  report       PluginEnhancerReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     Int
  suggestions  PluginSuggestion[]

  @@map("plugin_analyses")
}

model PluginSuggestion {
  id           Int            @id @default(autoincrement())
  type         String
  severity     String
  message      String
  details      String?
  code         String?
  analysis     PluginAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  analysisId   Int

  @@map("plugin_suggestions")
}

model ModelComparison {
  id                      Int       @id @default(autoincrement())
  pluginId                String
  modelType               String
  baselineInitTime        Float?
  baselineRenderTime      Float?
  baselineDestroyTime     Float?
  comparisonInitTime      Float?
  comparisonRenderTime    Float?
  comparisonDestroyTime   Float?
  initTimeImprovement     Float?
  renderTimeImprovement   Float?
  destroyTimeImprovement  Float?
  timestamp               DateTime  @default(now())
  trainingSession         TrainingSession? @relation(fields: [trainingSessionId], references: [id])
  trainingSessionId       Int?

  @@map("model_comparisons")
}

model TrainingSession {
  id                Int                  @id @default(autoincrement())
  startTime         DateTime             @default(now())
  endTime           DateTime?
  status            String               @default("running") // running, completed, failed
  baselineModel     String
  experimentalModel String
  iterations        Int
  report            PluginEnhancerReport @relation(fields: [reportId], references: [id])
  reportId          Int
  results           ModelComparison[]
  learnings         TrainingLearning[]

  @@map("training_sessions")
}

model TrainingLearning {
  id                Int             @id @default(autoincrement())
  category          String          // performance, memory, lifecycle, etc.
  description       String
  confidence        Float           // 0-1 scale
  appliedToPlugins  String[]
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
  trainingSessionId Int
  timestamp         DateTime        @default(now())

  @@map("training_learnings")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  role         UserRole @default(USER)
  hasOnboarded Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  feedback     BetaFeedback[]
  campaigns    Campaign[]
  comments     Comment[]
  activities   TaskActivity[]
  reminders    TaskReminder[]
  moderatedComments Comment[] @relation("ModeratedBy")
}

model BetaFeedback {
  id             String   @id @default(cuid())
  rating         Int      // 1-5 star rating
  feedback       String?  // Optional text feedback
  featureInterest String[] // Array of features the user is interested in
  createdAt      DateTime @default(now())
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
}

model Campaign {
  id          String         @id @default(cuid())
  name        String
  description String?
  status      CampaignStatus @default(DRAFT)
  tags        String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  items       CampaignItem[]
}

model CampaignItem {
  id          String           @id @default(cuid())
  title       String
  description String?
  type        CampaignItemType
  status      ItemStatus       @default(SCHEDULED)
  scheduledAt DateTime?
  completedAt DateTime?
  campaignId  String
  campaign    Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Content can be stored as JSON or in separate content-specific models
  contentData String?          // JSON data for the content
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum CampaignItemType {
  POST
  DM
  EMAIL
  EXPERIMENT
  TASK
}

enum ItemStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  FAILED
}

model Task {
  id             String           @id @default(cuid())
  title          String
  description    String?
  status         String           @default("PENDING")
  priority       String           @default("MEDIUM")
  dueDate        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  
  // Existing relations
  subtasks       Subtask[]
  blockedBy      TaskDependency[] @relation("blocked")
  blocking       TaskDependency[] @relation("blockers")
  comments       Comment[]
  attachments    TaskAttachment[]
  activities     TaskActivity[]
  reminders      TaskReminder[]
  labels         TaskLabel[]
  
  // New recurrence relation
  recurrence     TaskRecurrence?  @relation(fields: [recurrenceId], references: [id])
  recurrenceId   String?
  
  // For public sharing
  isPublic       Boolean          @default(false)
  publicSlug     String?          @unique
}

model TaskRecurrence {
  id             String     @id @default(cuid())
  pattern        String     // DAILY | WEEKLY | MONTHLY | CUSTOM
  interval       Int        // e.g. every 3 days
  endsAt         DateTime?  // optional end date
  createdAt      DateTime   @default(now())
  tasks          Task[]
}

model Comment {
  id          String            @id @default(cuid())
  taskId      String
  userId      String
  content     String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  visibility  CommentVisibility @default(PUBLIC)
  edited      Boolean           @default(false)
  deleted     Boolean           @default(false) // soft delete
  moderatedBy User?             @relation("ModeratedBy", fields: [moderatedById], references: [id])
  moderatedById String?
  moderationReason String?

  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

model Subtask {
  id          String   @id @default(cuid())
  title       String
  completed   Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskDependency {
  id              String   @id @default(cuid())
  blockedTaskId   String
  blockerTaskId   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  blockedTask     Task     @relation("blocked", fields: [blockedTaskId], references: [id], onDelete: Cascade)
  blockerTask     Task     @relation("blockers", fields: [blockerTaskId], references: [id], onDelete: Cascade)
}

model TaskAttachment {
  id          String   @id @default(cuid())
  fileName    String
  fileType    String
  fileSize    Int
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskActivity {
  id          String   @id @default(cuid())
  type        String   // CREATED, UPDATED, COMMENT_ADDED, COMMENT_DELETED, STATUS_CHANGED, etc.
  details     String?  // JSON string with additional details
  createdAt   DateTime @default(now())
  taskId      String
  userId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

enum ReminderMethod {
  EMAIL
  IN_APP
}

model TaskReminder {
  id          String         @id @default(cuid())
  taskId      String
  userId      String
  remindAt    DateTime
  method      ReminderMethod @default(IN_APP)
  message     String?
  sent        Boolean        @default(false)
  createdAt   DateTime       @default(now())
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id])
}

model TaskLabel {
  id        String   @id @default(cuid())
  taskId    String
  labelId   String
  createdAt DateTime @default(now())
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
}

model Label {
  id          String       @id @default(cuid())
  name        String
  color       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  taskLabels  TaskLabel[]
}

enum CommentVisibility {
  PUBLIC
  PRIVATE
  HIDDEN
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}
