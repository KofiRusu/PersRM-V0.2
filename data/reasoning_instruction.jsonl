{"instruction": "Create a user profile edit form with photo upload", "output": "This form should be structured in logical sections with field grouping. For photo upload, use a dropzone with preview and progress indicators. Consider validation for required fields like email and phone. Implement optimistic updates to improve UX - update the UI immediately while the API call happens in background. Add a cancel button that confirms before discarding changes. Use shadcn Form and Input components with React Hook Form for validation and state management. Consider accessibility by adding proper aria-labels and ensuring keyboard navigation works for all interactive elements."}
{"instruction": "Design a dashboard homepage with activity feed and quick actions", "output": "The dashboard should follow a 3-column layout on desktop (collapsing to single column on mobile): navigation sidebar, main content area, and a smaller right sidebar for quick actions. The activity feed should use virtual scrolling for performance when displaying many items. Implement skeleton loading states for all data-dependent components. Quick actions should be context-aware (showing different options based on user role). Use a grid of cards for key metrics with consistent styling. Apply subtle animations for state transitions using framer-motion. Ensure all interactive elements have proper hover/focus states using Tailwind's group-hover classes."}
{"instruction": "Build a role-based authentication system with JWT", "output": "Implement a multi-tier permission system with roles (admin, editor, user) stored in JWT claims. Use Next.js middleware for route protection based on roles. Create a server-side authentication provider using tRPC with protected procedures. Implement token refresh logic with sliding expiration. Store the access token in memory and refresh token in an HTTP-only cookie for security. Add role-checking hooks (useHasPermission) for conditional UI rendering. Implement a login page with proper error handling and CSRF protection. Add passwordless login option with magic links. For security, implement rate limiting on auth endpoints and account lockout after failed attempts. Consider session management with the ability to revoke active sessions."} 